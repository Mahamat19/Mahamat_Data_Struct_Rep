{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Structures in Python","text":"<p>Welcome to the documentation for custom implementations of core data structures in Python.</p>"},{"location":"#included-structures","title":"Included Structures","text":"<ul> <li>Array</li> <li>Singly Linked List</li> <li>Stack</li> <li>Queue</li> <li>Binary Tree</li> </ul>"},{"location":"array/","title":"Array","text":"<pre><code>site_name: Array Class Docs\ntheme:\n  name: material\n\nnav:\n  - Home: index.md\n</code></pre>"},{"location":"array/#docsindexmd","title":"\ud83d\udcc4 <code>docs/index.md</code>","text":"<pre><code># Array Class Documentation\n\nThis is a custom implementation of a dynamic array in Python.\n\n---\n\n## Class: `Array`\n\n### Constructor\n\n```python\nArray(cap=5)\n</code></pre> <p>Initializes the array with a given capacity (default is 5).</p> <ul> <li>Parameters:</li> <li><code>cap</code> (int): Initial capacity of the array. Default is 5.</li> </ul>"},{"location":"array/#method-appendvalue","title":"Method: <code>append(value)</code>","text":"<p>Adds a new value at the end of the array.</p> <pre><code>array.append(value)\n</code></pre> <ul> <li>Automatically resizes the array if capacity is exceeded.</li> </ul>"},{"location":"array/#method-pop","title":"Method: <code>pop()</code>","text":"<p>Removes and returns the last item.</p> <pre><code>value = array.pop()\n</code></pre> <ul> <li>Raises <code>IndexError</code> if the array is empty.</li> </ul>"},{"location":"array/#method-getindex","title":"Method: <code>get(index)</code>","text":"<p>Returns the element at the given index.</p> <pre><code>value = array.get(index)\n</code></pre> <ul> <li>Raises <code>IndexError</code> if the index is out of bounds.</li> </ul>"},{"location":"array/#method-last","title":"Method: <code>last()</code>","text":"<p>Returns the last item without removing it.</p> <pre><code>value = array.last()\n</code></pre> <ul> <li>Returns <code>None</code> if the array is empty.</li> </ul>"},{"location":"array/#method-is_empty","title":"Method: <code>is_empty()</code>","text":"<p>Checks if the array is empty.</p> <pre><code>array.is_empty()\n</code></pre> <ul> <li>Returns <code>True</code> if empty, otherwise <code>False</code>.</li> </ul>"},{"location":"array/#internal-method-_resize","title":"Internal Method: <code>_resize()</code>","text":"<p>Doubles the array's capacity. Used internally by <code>append</code>.</p>"},{"location":"array/#magic-method-__str__","title":"Magic Method: <code>__str__()</code>","text":"<p>Returns a string representation of the array (up to current size).</p> <pre><code>print(array)\n</code></pre>"},{"location":"array/#example-usage","title":"\ud83d\udd0d Example Usage","text":"<pre><code>arr = Array()\narr.append(1)\narr.append(2)\nprint(arr.get(1))      # 2\nprint(arr.pop())       # 2\nprint(arr.is_empty())  # False\nprint(arr)             # [1]\n</code></pre> <p>```</p> <p>Let me know if you want: - A downloadable ZIP of this project - It hosted on GitHub Pages - To add extra pages (like tests or implementation notes)</p>"},{"location":"binary_tree/","title":"Binary Tree","text":""},{"location":"binary_tree/#docsbinary_treemd","title":"<code>docs/binary_tree.md</code>","text":"<pre><code># Binary Tree\n</code></pre> <p>A binary search tree (BST) implementation in Python.</p>"},{"location":"binary_tree/#features","title":"Features","text":"<ul> <li>Insert</li> <li>Delete</li> <li>Search</li> <li>In-order Traversal</li> <li>Pre-order Traversal</li> <li>Post-order Traversal</li> </ul>"},{"location":"binary_tree/#class-overview","title":"Class Overview","text":"<pre><code>class BinaryTree:\n    def __init__(self):\n        self.root = None\n    ...\n</code></pre>"},{"location":"linked_list/","title":"Singly Linked List","text":"<p>A simple implementation of a singly linked list with common operations like insert, delete, sort, and search.</p>"},{"location":"linked_list/#features","title":"Features","text":"<ul> <li>Insertion (beginning, end, after index)</li> <li>Deletion by index</li> <li>Update</li> <li>Access</li> <li>Search</li> <li>Display</li> <li>Length</li> </ul>"},{"location":"linked_list/#class-overview","title":"Class Overview","text":"<pre><code>class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    ...\n</code></pre>"},{"location":"stack/","title":"Stack","text":""},{"location":"stack/#docsstackmd","title":"<code>docs/stack.md</code>","text":"<pre><code># Stack\n</code></pre> <p>A basic stack implementation using a Python list.</p>"},{"location":"stack/#features","title":"Features","text":"<ul> <li>Push</li> <li>Pop</li> <li>Peek (top)</li> <li>Check empty</li> <li>Display</li> </ul>"},{"location":"stack/#class-overview","title":"Class Overview","text":"<pre><code>class Stack:\n    def __init__(self, para=[]):\n        self.stack = para\n    ...\n</code></pre>"}]}